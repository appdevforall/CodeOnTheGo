// Generated by view binder compiler. Do not edit!
package org.appdevforall.layouteditor.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatSeekBar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.appdevforall.layouteditor.R;
import org.appdevforall.layouteditor.views.ColorView;

public final class LayoutColorDialogBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TextInputEditText ainputEdittext;

  @NonNull
  public final TextInputLayout ainputLayout;

  @NonNull
  public final TextInputEditText binputEdittext;

  @NonNull
  public final TextInputLayout binputLayout;

  @NonNull
  public final ColorView colorPreview;

  @NonNull
  public final TextInputEditText ginputEdittext;

  @NonNull
  public final TextInputLayout ginputLayout;

  @NonNull
  public final TextInputEditText rinputEdittext;

  @NonNull
  public final TextInputLayout rinputLayout;

  @NonNull
  public final AppCompatSeekBar seekAlpha;

  @NonNull
  public final AppCompatSeekBar seekBlue;

  @NonNull
  public final AppCompatSeekBar seekGreen;

  @NonNull
  public final AppCompatSeekBar seekRed;

  private LayoutColorDialogBinding(@NonNull ScrollView rootView,
      @NonNull TextInputEditText ainputEdittext, @NonNull TextInputLayout ainputLayout,
      @NonNull TextInputEditText binputEdittext, @NonNull TextInputLayout binputLayout,
      @NonNull ColorView colorPreview, @NonNull TextInputEditText ginputEdittext,
      @NonNull TextInputLayout ginputLayout, @NonNull TextInputEditText rinputEdittext,
      @NonNull TextInputLayout rinputLayout, @NonNull AppCompatSeekBar seekAlpha,
      @NonNull AppCompatSeekBar seekBlue, @NonNull AppCompatSeekBar seekGreen,
      @NonNull AppCompatSeekBar seekRed) {
    this.rootView = rootView;
    this.ainputEdittext = ainputEdittext;
    this.ainputLayout = ainputLayout;
    this.binputEdittext = binputEdittext;
    this.binputLayout = binputLayout;
    this.colorPreview = colorPreview;
    this.ginputEdittext = ginputEdittext;
    this.ginputLayout = ginputLayout;
    this.rinputEdittext = rinputEdittext;
    this.rinputLayout = rinputLayout;
    this.seekAlpha = seekAlpha;
    this.seekBlue = seekBlue;
    this.seekGreen = seekGreen;
    this.seekRed = seekRed;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutColorDialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutColorDialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_color_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutColorDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ainput_edittext;
      TextInputEditText ainputEdittext = ViewBindings.findChildViewById(rootView, id);
      if (ainputEdittext == null) {
        break missingId;
      }

      id = R.id.ainput_layout;
      TextInputLayout ainputLayout = ViewBindings.findChildViewById(rootView, id);
      if (ainputLayout == null) {
        break missingId;
      }

      id = R.id.binput_edittext;
      TextInputEditText binputEdittext = ViewBindings.findChildViewById(rootView, id);
      if (binputEdittext == null) {
        break missingId;
      }

      id = R.id.binput_layout;
      TextInputLayout binputLayout = ViewBindings.findChildViewById(rootView, id);
      if (binputLayout == null) {
        break missingId;
      }

      id = R.id.color_preview;
      ColorView colorPreview = ViewBindings.findChildViewById(rootView, id);
      if (colorPreview == null) {
        break missingId;
      }

      id = R.id.ginput_edittext;
      TextInputEditText ginputEdittext = ViewBindings.findChildViewById(rootView, id);
      if (ginputEdittext == null) {
        break missingId;
      }

      id = R.id.ginput_layout;
      TextInputLayout ginputLayout = ViewBindings.findChildViewById(rootView, id);
      if (ginputLayout == null) {
        break missingId;
      }

      id = R.id.rinput_edittext;
      TextInputEditText rinputEdittext = ViewBindings.findChildViewById(rootView, id);
      if (rinputEdittext == null) {
        break missingId;
      }

      id = R.id.rinput_layout;
      TextInputLayout rinputLayout = ViewBindings.findChildViewById(rootView, id);
      if (rinputLayout == null) {
        break missingId;
      }

      id = R.id.seek_alpha;
      AppCompatSeekBar seekAlpha = ViewBindings.findChildViewById(rootView, id);
      if (seekAlpha == null) {
        break missingId;
      }

      id = R.id.seek_blue;
      AppCompatSeekBar seekBlue = ViewBindings.findChildViewById(rootView, id);
      if (seekBlue == null) {
        break missingId;
      }

      id = R.id.seek_green;
      AppCompatSeekBar seekGreen = ViewBindings.findChildViewById(rootView, id);
      if (seekGreen == null) {
        break missingId;
      }

      id = R.id.seek_red;
      AppCompatSeekBar seekRed = ViewBindings.findChildViewById(rootView, id);
      if (seekRed == null) {
        break missingId;
      }

      return new LayoutColorDialogBinding((ScrollView) rootView, ainputEdittext, ainputLayout,
          binputEdittext, binputLayout, colorPreview, ginputEdittext, ginputLayout, rinputEdittext,
          rinputLayout, seekAlpha, seekBlue, seekGreen, seekRed);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
