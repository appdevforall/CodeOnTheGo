name: Build and Test with Firebase Test Lab

permissions:
  contents: read
  id-token: write
  actions: write

on:
  schedule:
    - cron: '0 12 * * *'
  workflow_dispatch: #

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IDE_SIGNING_ALIAS: ${{ secrets.IDE_SIGNING_ALIAS }}
  IDE_SIGNING_AUTH_PASS: ${{ secrets.IDE_SIGNING_AUTH_PASS }}
  IDE_SIGNING_AUTH_USER: ${{ secrets.IDE_SIGNING_AUTH_USER }}
  IDE_SIGNING_KEY_PASS: ${{ secrets.IDE_SIGNING_KEY_PASS }}
  IDE_SIGNING_STORE_PASS: ${{ secrets.IDE_SIGNING_STORE_PASS }}
  IDE_SIGNING_URL: ${{ secrets.IDE_SIGNING_URL }}
  IDE_SIGNING_KEY_BIN: ${{ secrets.IDE_SIGNING_KEY_BIN }}
  ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MVN_USERNAME }}
  ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MVN_PASSWORD }}
  ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MVN_SIGNING_KEY }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.MVN_SIGNING_KEY_ID }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MVN_SIGNING_KEY_PASSWORD }}
  FIREBASE_CONSOLE_URL: ${{ secrets.FIREBASE_CONSOLE_URL }}
  FIREBASE_DISTRIBUTION_URL: ${{ secrets.FIREBASE_DISTRIBUTION_URL }}
  FIREBASE_DOWNLOAD_URL: ${{ secrets.FIREBASE_DOWNLOAD_URL }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  build_test:
    name: Build and Firebase Test
    runs-on: [self-hosted, devops]
    timeout-minutes: 120
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install and Configure Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install -y git-lfs make unzip cmake
          git lfs install
          git lfs pull

      - name: Initialize submodules
        run: |
          git submodule init
          git submodule update --remote

      - name: Set up JDKs
        uses: actions/setup-java@v4
        with:
          cache: 'gradle'
          distribution: temurin
          java-version: |
            8
            17

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK Platform + Tools
        run: sdkmanager "platforms;android-35" "build-tools;35.0.0" "cmake;3.31.4"

      - name: Verify CMake version
        run: cmake --version

      - name: Set Java_ROOT environment variable
        run: echo "Java_ROOT=$JAVA_HOME_8_X64" >> $GITHUB_ENV

      - name: Disable SPLIT_ASSETS in CI
        run: |
          sed -i 's/const val SPLIT_ASSETS = \/\* false \*\/ true/const val SPLIT_ASSETS = \/\* false \*\/ false/' ./composite-builds/build-deps-common/constants/src/main/java/org/adfa/constants/constants.kt

      - name: Assemble APKs
        run: |
          ./gradlew :app:assembleV8InstrumentationAndroidTest --no-daemon
          ./gradlew :app:assembleV8Instrumentation --no-daemon

      - name: Authenticate to Google Cloud via Workload Identity
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.IDENTITY_EMAIL }}

      - name: Run Firebase Test Lab and Wait for Results
        run: |
          mkdir -p test-results/kotlin test-results/groovy

          # Find the most recent APK files
          APP_APK=$(find app/build/outputs/apk/v8/instrumentation -name "*.apk" -type f | sort | tail -1)
          TEST_APK=$(find app/build/outputs/apk/androidTest/v8/instrumentation -name "*.apk" -type f | sort | tail -1)

          if [[ -z "$APP_APK" ]]; then
            echo "ERROR: App APK not found!"
            exit 1
          fi

          if [[ -z "$TEST_APK" ]]; then
            echo "ERROR: Test APK not found!"
            exit 1
          fi

          echo "Using App APK: $APP_APK"
          echo "Using Test APK: $TEST_APK"

          # Run Kotlin DSL tests
          echo "Running Kotlin DSL tests..."
          echo "Command: gcloud firebase test android run --type instrumentation --project=codeonthego-64a92"
          echo "Device: model=caiman,version=35,locale=en,orientation=portrait"
          echo "Timeout: 45m, Flaky test attempts: 2"

          gcloud firebase test android run \
            --type instrumentation \
            --app "$APP_APK" \
            --test "$TEST_APK" \
            --device model=caiman,version=35,locale=en,orientation=portrait \
            --environment-variables clearPackageData=true \
            --use-orchestrator \
            --timeout 45m \
            --num-flaky-test-attempts=2 \
            --results-dir=test-results/kotlin \
            --results-bucket=gs://firebase-test-results-${RANDOM} \
            --project=codeonthego-64a92 \
            --test-targets "class com.itsaky.androidide.ProjectBuildTestWithKtsGradle" 2>&1 | tee test-results/kotlin/test_output.txt

          KOTLIN_EXIT_CODE=${PIPESTATUS[0]}
          echo "Kotlin tests exit code: $KOTLIN_EXIT_CODE"

          if [ $KOTLIN_EXIT_CODE -ne 0 ]; then
            echo "❌ Kotlin DSL tests failed with exit code $KOTLIN_EXIT_CODE"
            echo "=== KOTLIN TEST OUTPUT ==="
            cat test-results/kotlin/test_output.txt
            echo "=========================="
          else
            echo "✅ Kotlin DSL tests completed successfully"
          fi

          # Extract Firebase Test Lab URL for Kotlin tests
          KOTLIN_TEST_URL=$(grep -o 'https://console.firebase.google.com/project/[^[:space:]]*' test-results/kotlin/test_output.txt | head -1 || echo "")
          echo "KOTLIN_TEST_URL=$KOTLIN_TEST_URL" >> $GITHUB_ENV

          # Extract video URL for Kotlin tests - try multiple patterns
          KOTLIN_VIDEO_URL=$(grep -o 'https://storage\.cloud\.google\.com/[^[:space:]]*/video\.mp4' test-results/kotlin/test_output.txt | head -1 || \
                            grep -o 'https://storage\.googleapis\.com/[^[:space:]]*/video\.mp4' test-results/kotlin/test_output.txt | head -1 || \
                            grep -o 'gs://[^[:space:]]*/video\.mp4' test-results/kotlin/test_output.txt | sed 's|gs://|https://storage.cloud.google.com/|' | head -1 || echo "")
          echo "KOTLIN_VIDEO_URL=$KOTLIN_VIDEO_URL" >> $GITHUB_ENV

          # Run Groovy DSL tests
          # echo "Running Groovy DSL tests..."
          # echo "Command: gcloud firebase test android run --type instrumentation --project=codeonthego-64a92"
          # echo "Device: model=caiman,version=35,locale=en,orientation=portrait"
          # echo "Timeout: 45m, Flaky test attempts: 2"

          # gcloud firebase test android run \
          #   --type instrumentation \
          #   --app "$APP_APK" \
          #   --test "$TEST_APK" \
          #   --device model=caiman,version=35,locale=en,orientation=portrait \
          #   --environment-variables clearPackageData=true \
          #   --use-orchestrator \
          #   --timeout 45m \
          #   --num-flaky-test-attempts=2 \
          #   --results-dir=test-results/groovy \
          #   --results-bucket=gs://firebase-test-results-${RANDOM} \
          #   --project=codeonthego-64a92 \
          #   --test-targets "class com.itsaky.androidide.ProjectBuildTestWithGroovyGradle" 2>&1 | tee test-results/groovy/test_output.txt

          # GROOVY_EXIT_CODE=${PIPESTATUS[0]}
          # echo "Groovy tests exit code: $GROOVY_EXIT_CODE"

          # if [ $GROOVY_EXIT_CODE -ne 0 ]; then
          #   echo "❌ Groovy DSL tests failed with exit code $GROOVY_EXIT_CODE"
          #   echo "=== GROOVY TEST OUTPUT ==="
          #   cat test-results/groovy/test_output.txt
          #   echo "=========================="
          # else
          #   echo "✅ Groovy DSL tests completed successfully"
          # fi

          # Extract Firebase Test Lab URL for Groovy tests
          # GROOVY_TEST_URL=$(grep -o 'https://console.firebase.google.com/project/[^[:space:]]*' test-results/groovy/test_output.txt | head -1 || echo "")
          # echo "GROOVY_TEST_URL=$GROOVY_TEST_URL" >> $GITHUB_ENV

          # Extract video URL for Groovy tests - try multiple patterns
          # GROOVY_VIDEO_URL=$(grep -o 'https://storage\.cloud\.google\.com/[^[:space:]]*/video\.mp4' test-results/groovy/test_output.txt | head -1 || \
          #                   grep -o 'https://storage\.googleapis\.com/[^[:space:]]*/video\.mp4' test-results/groovy/test_output.txt | head -1 || \
          #                   grep -o 'gs://[^[:space:]]*/video\.mp4' test-results/groovy/test_output.txt | sed 's|gs://|https://storage.cloud.google.com/|' | head -1 || echo "")
          # echo "GROOVY_VIDEO_URL=$GROOVY_VIDEO_URL" >> $GITHUB_ENV

          # Set Groovy variables to empty since tests are commented out
          GROOVY_EXIT_CODE=0
          echo "GROOVY_TEST_URL=" >> $GITHUB_ENV
          echo "GROOVY_VIDEO_URL=" >> $GITHUB_ENV

          # Set overall exit code for the step
          if [ $KOTLIN_EXIT_CODE -ne 0 ] || [ $GROOVY_EXIT_CODE -ne 0 ]; then
            echo "Some tests failed"
            exit 1
          fi

      - name: Notify Slack with parsed test results
        if: always()  # Run even if tests fail
        run: |
          parse_results() {
            local file="$1"
            local test_name="$2"
          
            if [[ ! -f "$file" ]]; then
              echo "$test_name: No results file found"
              return
            fi
          
            # Check if file is empty
            if [[ ! -s "$file" ]]; then
              echo "$test_name: Results file is empty"
              return
            fi
          
            # Parse Firebase Test Lab results - look for common patterns
            local pass=$(grep -i "passed\|success" "$file" | wc -l || echo "0")
            local fail=$(grep -i "failed\|error" "$file" | wc -l || echo "0")
            local total=$((pass + fail))
          
            # If no specific test results found, check exit status or general output
            if [[ $total -eq 0 ]]; then
              if grep -q "Test run completed" "$file"; then
                echo "$test_name: Test completed (check Firebase console for details)"
              else
                echo "$test_name: Test may have failed or results unclear"
              fi
            else
              echo "$test_name: Tests run: $total, Passed: $pass, Failed: $fail"
            fi
          }

          echo "Parsing test results..."
          KOTLIN_RESULTS=$(parse_results test-results/kotlin/test_output.txt "Kotlin DSL")
          GROOVY_RESULTS=$(parse_results test-results/groovy/test_output.txt "Groovy DSL")
          
          # Also capture the actual output for debugging
          echo "Kotlin output file contents:"
          if [[ -f test-results/kotlin/test_output.txt ]]; then
            head -20 test-results/kotlin/test_output.txt
          else
            echo "File does not exist"
          fi
          
          echo "Groovy output file contents:"
          if [[ -f test-results/groovy/test_output.txt ]]; then
            head -20 test-results/groovy/test_output.txt
          else
            echo "File does not exist"
          fi

          # Send to Slack with better formatting
          SLACK_MESSAGE="*🔥 Firebase Test Lab Results*\\n\\n"
          SLACK_MESSAGE="$SLACK_MESSAGE*${KOTLIN_RESULTS}*\\n"
          SLACK_MESSAGE="$SLACK_MESSAGE*${GROOVY_RESULTS}*\\n"
          
          # Add Kotlin URLs
          if [[ -n "$KOTLIN_TEST_URL" ]]; then
            SLACK_MESSAGE="$SLACK_MESSAGE\\n🔗 Kotlin Test Results: $KOTLIN_TEST_URL"
          fi
          
          if [[ -n "$KOTLIN_VIDEO_URL" ]]; then
            SLACK_MESSAGE="$SLACK_MESSAGE\\n🎥 Kotlin Test Video: $KOTLIN_VIDEO_URL"
          fi
          
          # Add Groovy URLs  
          if [[ -n "$GROOVY_TEST_URL" ]]; then
            SLACK_MESSAGE="$SLACK_MESSAGE\\n\\n🔗 Groovy Test Results: $GROOVY_TEST_URL"
          fi
          
          if [[ -n "$GROOVY_VIDEO_URL" ]]; then
            SLACK_MESSAGE="$SLACK_MESSAGE\\n🎥 Groovy Test Video: $GROOVY_VIDEO_URL"
          fi
          
          # Add debugging info to see what URLs were found
          echo "Debug - Kotlin Video URL: '$KOTLIN_VIDEO_URL'"
          echo "Debug - Groovy Video URL: '$GROOVY_VIDEO_URL'"
          echo "Debug - Kotlin Test URL: '$KOTLIN_TEST_URL'"
          echo "Debug - Groovy Test URL: '$GROOVY_TEST_URL'"
          
          # Fallback to general Firebase console if no specific URLs found
          if [[ -z "$KOTLIN_TEST_URL" && -z "$GROOVY_TEST_URL" ]]; then
            SLACK_MESSAGE="$SLACK_MESSAGE\\n\\n📱 Check Firebase console: ${{ env.FIREBASE_CONSOLE_URL }}"
          fi

#          curl -X POST \
#            -H 'Content-type: application/json' \
#            --data "$(printf '{"text":"%s"}' "$SLACK_MESSAGE")" \
#            "${{ env.SLACK_WEBHOOK }}"