name: Build and Test with Firebase Test Lab

permissions:
  contents: read
  id-token: write
  actions: write

on:
  schedule:
    - cron: '0 12 * * *'
  workflow_dispatch: #

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IDE_SIGNING_ALIAS: ${{ secrets.IDE_SIGNING_ALIAS }}
  IDE_SIGNING_AUTH_PASS: ${{ secrets.IDE_SIGNING_AUTH_PASS }}
  IDE_SIGNING_AUTH_USER: ${{ secrets.IDE_SIGNING_AUTH_USER }}
  IDE_SIGNING_KEY_PASS: ${{ secrets.IDE_SIGNING_KEY_PASS }}
  IDE_SIGNING_STORE_PASS: ${{ secrets.IDE_SIGNING_STORE_PASS }}
  IDE_SIGNING_URL: ${{ secrets.IDE_SIGNING_URL }}
  IDE_SIGNING_KEY_BIN: ${{ secrets.IDE_SIGNING_KEY_BIN }}
  ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MVN_USERNAME }}
  ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MVN_PASSWORD }}
  ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MVN_SIGNING_KEY }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.MVN_SIGNING_KEY_ID }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MVN_SIGNING_KEY_PASSWORD }}
  FIREBASE_CONSOLE_URL: ${{ secrets.FIREBASE_CONSOLE_URL }}
  FIREBASE_DISTRIBUTION_URL: ${{ secrets.FIREBASE_DISTRIBUTION_URL }}
  FIREBASE_DOWNLOAD_URL: ${{ secrets.FIREBASE_DOWNLOAD_URL }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  build:
    name: Build APKs
    runs-on: [self-hosted, devops]
    timeout-minutes: 30
    outputs:
      app-apk-name: ${{ steps.apk-info.outputs.app-apk-name }}
      test-apk-name: ${{ steps.apk-info.outputs.test-apk-name }}
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install and Configure Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install -y git-lfs make unzip cmake
          git lfs install
          git lfs pull

      - name: Initialize submodules
        run: |
          git submodule init
          git submodule update --remote

      - name: Set up JDKs
        uses: actions/setup-java@v4
        with:
          cache: 'gradle'
          distribution: temurin
          java-version: |
            8
            17

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK Platform + Tools
        run: sdkmanager "platforms;android-35" "build-tools;35.0.0" "cmake;3.31.4"

      - name: Verify CMake version
        run: cmake --version

      - name: Set Java_ROOT environment variable
        run: echo "Java_ROOT=$JAVA_HOME_8_X64" >> $GITHUB_ENV

      - name: Disable SPLIT_ASSETS in CI
        run: |
          sed -i 's/const val SPLIT_ASSETS = \/\* false \*\/ true/const val SPLIT_ASSETS = \/\* false \*\/ false/' ./composite-builds/build-deps-common/constants/src/main/java/org/adfa/constants/constants.kt

      - name: Assemble APKs
        run: |
          ./gradlew :app:assembleV8InstrumentationAndroidTest --no-daemon
          ./gradlew :app:assembleV8Instrumentation --no-daemon

      - name: Get APK info and upload artifacts
        id: apk-info
        run: |
          # Find the most recent APK files
          APP_APK=$(find app/build/outputs/apk/v8/instrumentation -name "*.apk" -type f | sort | tail -1)
          TEST_APK=$(find app/build/outputs/apk/androidTest/v8/instrumentation -name "*.apk" -type f | sort | tail -1)

          if [[ -z "$APP_APK" ]]; then
            echo "ERROR: App APK not found!"
            exit 1
          fi

          if [[ -z "$TEST_APK" ]]; then
            echo "ERROR: Test APK not found!"
            exit 1
          fi

          echo "Using App APK: $APP_APK"
          echo "Using Test APK: $TEST_APK"

          # Set outputs for parallel test jobs
          echo "app-apk-name=$(basename "$APP_APK")" >> $GITHUB_OUTPUT
          echo "test-apk-name=$(basename "$TEST_APK")" >> $GITHUB_OUTPUT

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-apks
          path: |
            app/build/outputs/apk/v8/instrumentation/*.apk
            app/build/outputs/apk/androidTest/v8/instrumentation/*.apk
          retention-days: 1

  test:
    name: Firebase Test Lab
    runs-on: [self-hosted, devops]
    needs: build
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        test-type: [kotlin, groovy]
        include:
          - test-type: kotlin
            target-class: "class com.itsaky.androidide.ProjectBuildTestWithKtsGradle"
            display-name: "Kotlin DSL"
          - test-type: groovy
            target-class: "class com.itsaky.androidide.ProjectBuildTestWithGroovyGradle"
            display-name: "Groovy DSL"
    outputs:
      test-url-kotlin: ${{ steps.set-output-kotlin.outputs.test-url }}
      video-url-kotlin: ${{ steps.set-output-kotlin.outputs.video-url }}
      test-url-groovy: ${{ steps.set-output-groovy.outputs.test-url }}
      video-url-groovy: ${{ steps.set-output-groovy.outputs.video-url }}
      result-kotlin: ${{ steps.set-output-kotlin.outputs.result }}
      result-groovy: ${{ steps.set-output-groovy.outputs.result }}
    steps:
      - name: Download APK artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-apks

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate to Google Cloud via Workload Identity
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.IDENTITY_EMAIL }}

      - name: Run Firebase Test Lab
        run: |
          mkdir -p test-results/${{ matrix.test-type }}

          # Find downloaded APK files
          APP_APK=$(find . -name "${{ needs.build.outputs.app-apk-name }}" -type f | head -1)
          TEST_APK=$(find . -name "${{ needs.build.outputs.test-apk-name }}" -type f | head -1)

          if [[ -z "$APP_APK" ]]; then
            echo "ERROR: App APK not found!"
            echo "Expected: ${{ needs.build.outputs.app-apk-name }}"
            echo "Available files:"
            find . -name "*.apk" -type f
            exit 1
          fi

          if [[ -z "$TEST_APK" ]]; then
            echo "ERROR: Test APK not found!"
            echo "Expected: ${{ needs.build.outputs.test-apk-name }}"
            echo "Available files:"
            find . -name "*.apk" -type f
            exit 1
          fi

          echo "Running ${{ matrix.display-name }} tests..."
          echo "Command: gcloud firebase test android run --type instrumentation --project=codeonthego-64a92"
          echo "Device: model=caiman,version=35,locale=en,orientation=portrait"
          echo "Timeout: 45m, Flaky test attempts: 2"

          gcloud firebase test android run \
            --type instrumentation \
            --app "$APP_APK" \
            --test "$TEST_APK" \
            --device model=caiman,version=35,locale=en,orientation=portrait \
            --environment-variables clearPackageData=true \
            --use-orchestrator \
            --timeout 45m \
            --num-flaky-test-attempts=2 \
            --results-dir=test-results/${{ matrix.test-type }} \
            --results-bucket=gs://firebase-test-results-${RANDOM} \
            --project=codeonthego-64a92 \
            --test-targets "${{ matrix.target-class }}" 2>&1 | tee test-results/${{ matrix.test-type }}/test_output.txt

          EXIT_CODE=${PIPESTATUS[0]}
          echo "${{ matrix.display-name }} tests exit code: $EXIT_CODE"

          if [ $EXIT_CODE -ne 0 ]; then
            echo "❌ ${{ matrix.display-name }} tests failed with exit code $EXIT_CODE"
            echo "=== ${{ matrix.test-type }} TEST OUTPUT ==="
            cat test-results/${{ matrix.test-type }}/test_output.txt
            echo "=========================="
          else
            echo "✅ ${{ matrix.display-name }} tests completed successfully"
          fi

          # Extract Firebase Test Lab URL
          TEST_URL=$(grep -o 'https://console.firebase.google.com/project/[^[:space:]]*' test-results/${{ matrix.test-type }}/test_output.txt | head -1 || echo "")
          echo "TEST_URL=$TEST_URL" >> $GITHUB_ENV

          # Extract video URL - try multiple patterns
          VIDEO_URL=$(grep -o 'https://storage\.cloud\.google\.com/[^[:space:]]*/video\.mp4' test-results/${{ matrix.test-type }}/test_output.txt | head -1 || \
                     grep -o 'https://storage\.googleapis\.com/[^[:space:]]*/video\.mp4' test-results/${{ matrix.test-type }}/test_output.txt | head -1 || \
                     grep -o 'gs://[^[:space:]]*/video\.mp4' test-results/${{ matrix.test-type }}/test_output.txt | sed 's|gs://|https://storage.cloud.google.com/|' | head -1 || echo "")
          echo "VIDEO_URL=$VIDEO_URL" >> $GITHUB_ENV

          # Set result for notification job
          if [ $EXIT_CODE -eq 0 ]; then
            echo "RESULT=✅ ${{ matrix.display-name }} tests completed successfully" >> $GITHUB_ENV
          else
            echo "RESULT=❌ ${{ matrix.display-name }} tests failed" >> $GITHUB_ENV
            exit 1
          fi

      - name: Set outputs for kotlin
        if: matrix.test-type == 'kotlin'
        id: set-output-kotlin
        run: |
          echo "test-url=$TEST_URL" >> $GITHUB_OUTPUT
          echo "video-url=$VIDEO_URL" >> $GITHUB_OUTPUT
          echo "result=$RESULT" >> $GITHUB_OUTPUT

      - name: Set outputs for groovy
        if: matrix.test-type == 'groovy'
        id: set-output-groovy
        run: |
          echo "test-url=$TEST_URL" >> $GITHUB_OUTPUT
          echo "video-url=$VIDEO_URL" >> $GITHUB_OUTPUT
          echo "result=$RESULT" >> $GITHUB_OUTPUT

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: test-results/${{ matrix.test-type }}/
          retention-days: 7

  notify:
    name: Notify Results
    runs-on: [self-hosted, devops]
    needs: [build, test]
    if: always()
    steps:
      - name: Download all test results
        if: always()
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true

      - name: Notify Slack with results
        if: always()
        run: |
          # Build Slack message
          SLACK_MESSAGE="*🔥 Firebase Test Lab Results*\\n\\n"
          
          # Add results from job outputs
          if [[ -n "${{ needs.test.outputs.result-kotlin }}" ]]; then
            SLACK_MESSAGE="$SLACK_MESSAGE*${{ needs.test.outputs.result-kotlin }}*\\n"
          fi
          
          if [[ -n "${{ needs.test.outputs.result-groovy }}" ]]; then
            SLACK_MESSAGE="$SLACK_MESSAGE*${{ needs.test.outputs.result-groovy }}*\\n"
          fi
          
          # Add Kotlin URLs
          if [[ -n "${{ needs.test.outputs.test-url-kotlin }}" ]]; then
            SLACK_MESSAGE="$SLACK_MESSAGE\\n🔗 Kotlin Test Results: ${{ needs.test.outputs.test-url-kotlin }}"
          fi
          
          if [[ -n "${{ needs.test.outputs.video-url-kotlin }}" ]]; then
            SLACK_MESSAGE="$SLACK_MESSAGE\\n🎥 Kotlin Test Video: ${{ needs.test.outputs.video-url-kotlin }}"
          fi
          
          # Add Groovy URLs  
          if [[ -n "${{ needs.test.outputs.test-url-groovy }}" ]]; then
            SLACK_MESSAGE="$SLACK_MESSAGE\\n\\n🔗 Groovy Test Results: ${{ needs.test.outputs.test-url-groovy }}"
          fi
          
          if [[ -n "${{ needs.test.outputs.video-url-groovy }}" ]]; then
            SLACK_MESSAGE="$SLACK_MESSAGE\\n🎥 Groovy Test Video: ${{ needs.test.outputs.video-url-groovy }}"
          fi
          
          # Fallback to general Firebase console if no specific URLs found
          if [[ -z "${{ needs.test.outputs.test-url-kotlin }}" && -z "${{ needs.test.outputs.test-url-groovy }}" ]]; then
            SLACK_MESSAGE="$SLACK_MESSAGE\\n\\n📱 Check Firebase console: ${{ env.FIREBASE_CONSOLE_URL }}"
          fi

          curl -X POST \
            -H 'Content-type: application/json' \
            --data "$(printf '{"text":"%s"}' "$SLACK_MESSAGE")" \
            "${{ env.SLACK_WEBHOOK }}"
