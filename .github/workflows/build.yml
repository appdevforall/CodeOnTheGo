name: Build APK
permissions:
  contents: write
  actions: write
on:
  pull_request:
    branches: [ "stage", "feature/**" ]
    paths-ignore:
      - '**.md'
      - 'fastlane/**'
      - '.github/workflows/crowdin_contributors.yml'
  workflow_dispatch: { }

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Signing info (if needed)
  IDE_SIGNING_ALIAS: ${{ secrets.IDE_SIGNING_ALIAS }}
  IDE_SIGNING_AUTH_PASS: ${{ secrets.IDE_SIGNING_AUTH_PASS }}
  IDE_SIGNING_AUTH_USER: ${{ secrets.IDE_SIGNING_AUTH_USER }}
  IDE_SIGNING_KEY_PASS: ${{ secrets.IDE_SIGNING_KEY_PASS }}
  IDE_SIGNING_STORE_PASS: ${{ secrets.IDE_SIGNING_STORE_PASS }}
  IDE_SIGNING_URL: ${{ secrets.IDE_SIGNING_URL }}
  IDE_SIGNING_KEY_BIN: ${{ secrets.IDE_SIGNING_KEY_BIN }}
  # Publishing credentials (if needed)
  ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MVN_USERNAME }}
  ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MVN_PASSWORD }}
  ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MVN_SIGNING_KEY }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.MVN_SIGNING_KEY_ID }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MVN_SIGNING_KEY_PASSWORD }}
  # Build configuration
  BUILD_JAVA_VERSION: '17'
  BUILD_JAVA_DIST: 'temurin'

jobs:
  build_apk:
    name: Build Universal APK
    runs-on: self-hosted
    timeout-minutes: 60
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Setup Git LFS
        run: |
          echo "Setting up Git LFS"
          where git-lfs || (
            echo "Installing Git LFS"
            powershell -Command "Invoke-WebRequest -Uri https://github.com/git-lfs/git-lfs/releases/download/v3.4.1/git-lfs-windows-amd64-v3.4.1.zip -OutFile git-lfs.zip; Expand-Archive -Path git-lfs.zip -DestinationPath git-lfs; cd git-lfs; .\git-lfs-3.4.1\install.bat"
          )
          git lfs install
        shell: cmd

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Pull Git LFS Files
        run: git lfs pull
        shell: cmd

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.BUILD_JAVA_VERSION }}
          distribution: ${{ env.BUILD_JAVA_DIST }}

      - name: Initialize Submodules
        run: |
          git submodule init
          git submodule update --remote
        shell: cmd

      - name: Restore Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Extract Commit Message
        id: extract_commit_message
        run: |
          for /f "tokens=*" %%a in ('git log -1 --pretty=format:"%%B"') do (
            set "COMMIT_MESSAGE=%%a"
          )
          echo Commit Message: %COMMIT_MESSAGE%
          echo COMMIT_MESSAGE=%COMMIT_MESSAGE% >> %GITHUB_ENV%
        shell: cmd

      - name: Assemble Universal APK
        id: build_apk
        run: |
          .\gradlew.bat assembleDebug
          if %errorlevel% neq 0 exit /b %errorlevel%
        shell: cmd

      - name: Extract Branch Information
        id: extract_branch
        run: |
          @echo off
          rem Use the head ref for PR events; otherwise, fallback to the branch name
          if defined GITHUB_HEAD_REF (
            set "BRANCH_NAME=%GITHUB_HEAD_REF%"
          ) else (
            set "BRANCH_NAME=%GITHUB_REF:refs/heads/=%"
          )
          echo Branch: %BRANCH_NAME%
          
          rem Extract Jira ticket pattern using PowerShell
          powershell -Command "$branch = '%BRANCH_NAME%'; $match = [regex]::Match($branch, '[A-Z]+-[0-9]+'); if($match.Success) { $folder = $match.Value } else { $folder = '%BRANCH_NAME%' }; Write-Output \"Folder Name: $folder\"; \"FOLDER_NAME=$folder\" | Out-File -Append $env:GITHUB_ENV"
        shell: cmd

      - name: Install rclone
        run: |
          echo Installing rclone...
          powershell -Command "Invoke-WebRequest -Uri 'https://downloads.rclone.org/rclone-current-windows-amd64.zip' -OutFile 'rclone.zip'"
          powershell -Command "Expand-Archive -Path 'rclone.zip' -DestinationPath '.\\rclone'"
          for /d %%i in (.\rclone\rclone-*-windows-amd64) do (
            set "RCLONE_DIR=%%i"
          )
          echo RCLONE_DIR is %RCLONE_DIR%
          set "RCLONE_PATH=%CD%\%RCLONE_DIR%\rclone.exe"
          echo RCLONE_PATH=%RCLONE_PATH% >> %GITHUB_ENV%
        shell: cmd

      - name: Configure rclone for Google Drive
        env:
          COGO_SERVICE_ACCOUNT: ${{ secrets.COGO_SERVICE_ACCOUNT }}
        run: |
          powershell -Command "Set-Content -Path 'gdrive-service-account.json' -Value $env:COGO_SERVICE_ACCOUNT"
          "%RCLONE_PATH%" config create google-drive drive scope drive service_account_file gdrive-service-account.json
        shell: cmd

      - name: Upload APK to Google Drive and Get Download Link
        id: upload_and_link
        env:
          COGO_SERVICE_ACCOUNT: ${{ secrets.COGO_SERVICE_ACCOUNT }}
        run: |
          @echo off
          rem Find APK file in the specific build output directory
          for /f "tokens=*" %%a in ('dir /s /b "app\build\outputs\apk\debug\CodeOnTheGo-*.apk"') do (
            set "APK_PATH=%%a"
          )

          if not defined APK_PATH (
            echo Error: No APK file found
            exit /b 1
          )

          echo Found APK: %APK_PATH%

          rem Extract just the filename
          for %%F in ("%APK_PATH%") do set "APK_FILENAME=%%~nxF"

          rem Upload to Google Drive folder
          "%RCLONE_PATH%" copy "%APK_PATH%" "google-drive:%FOLDER_NAME%" -v

          if %errorlevel% neq 0 (
            echo Error uploading APK to Google Drive
            exit /b 1
          )

          rem Generate shareable link using PowerShell and service account JWT
          powershell -Command ^
            "Add-Type -AssemblyName System.Web; ^
            Add-Type -AssemblyName System.IdentityModel; ^
            $serviceCreds = $env:COGO_SERVICE_ACCOUNT | ConvertFrom-Json; ^
            $privateKey = [System.Security.Cryptography.RSA]::Create(); ^
            $privateKey.ImportFromPem($serviceCreds.private_key); ^
            $now = [System.DateTimeOffset]::UtcNow.ToUnixTimeSeconds(); ^
            $exp = $now + 3600; ^
            $jwt_header = @{ alg = 'RS256'; typ = 'JWT' } | ConvertTo-Json -Compress; ^
            $jwt_claims = @{ ^
              iss = $serviceCreds.client_email; ^
              sub = $serviceCreds.client_email; ^
              aud = $serviceCreds.token_uri; ^
              iat = $now; ^
              exp = $exp; ^
              scope = 'https://www.googleapis.com/auth/drive' ^
            } | ConvertTo-Json -Compress; ^
            $base64Header = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($jwt_header)).TrimEnd('=').Replace('+', '-').Replace('/', '_'); ^
            $base64Claims = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($jwt_claims)).TrimEnd('=').Replace('+', '-').Replace('/', '_'); ^
            $jwt_signature_input = $base64Header + '.' + $base64Claims; ^
            $jwt_signature_bytes = [System.Text.Encoding]::UTF8.GetBytes($jwt_signature_input); ^
            $signature = $privateKey.SignData($jwt_signature_bytes, [System.Security.Cryptography.HashAlgorithmName]::SHA256, [System.Security.Cryptography.RSASignaturePadding]::Pkcs1); ^
            $base64Signature = [Convert]::ToBase64String($signature).TrimEnd('=').Replace('+', '-').Replace('/', '_'); ^
            $jwt = $jwt_signature_input + '.' + $base64Signature; ^
            $tokenBody = @{ ^
              grant_type = 'urn:ietf:params:oauth:grant-type:jwt-bearer'; ^
              assertion = $jwt ^
            }; ^
            $tokenResponse = Invoke-RestMethod -Method Post -Uri $serviceCreds.token_uri -Body $tokenBody; ^
            $accessToken = $tokenResponse.access_token; ^
            $folderName = '%FOLDER_NAME%'; ^
            $fileName = '%APK_FILENAME%'; ^
            $searchUri = 'https://www.googleapis.com/drive/v3/files?q=' + [System.Web.HttpUtility]::UrlEncode('name = "' + $fileName + '" and "' + $folderName + '" in parents'); ^
            $headers = @{ Authorization = 'Bearer ' + $accessToken }; ^
            $searchResponse = Invoke-RestMethod -Method Get -Uri $searchUri -Headers $headers; ^
            if ($searchResponse.files.Count -eq 0) { throw 'File not found' }; ^
            $fileId = $searchResponse.files[0].id; ^
            $permissionBody = @{ ^
              role = 'reader'; ^
              type = 'anyone' ^
            } | ConvertTo-Json; ^
            Invoke-RestMethod -Method Post -Uri ('https://www.googleapis.com/drive/v3/files/' + $fileId + '/permissions') -Headers $headers -Body $permissionBody -ContentType 'application/json'; ^
            $directLink = 'https://drive.google.com/uc?id=' + $fileId; ^
            Write-Output $directLink" > download_url.txt

          set /p DOWNLOAD_URL=<download_url.txt

          if not defined DOWNLOAD_URL (
            echo Error: Could not generate download link
            exit /b 1
          )

          echo APK Download URL: %DOWNLOAD_URL%
          echo DOWNLOAD_URL=%DOWNLOAD_URL% >> %GITHUB_ENV%
        shell: cmd

#      - name: Slack Notification
#        run: |
#          @echo off
#          rem Prepare dynamic message blocks
#          set "TICKET_URL=https://appdevforall.atlassian.net/browse/%FOLDER_NAME%"
#
#          rem Ensure DOWNLOAD_URL has a fallback
#          if not defined DOWNLOAD_URL (
#            set "DOWNLOAD_URL=Download link unavailable"
#          )
#
#          rem Create JSON payload with rich Slack message
#          set "PAYLOAD={\"blocks\":[{\"type\":\"header\",\"text\":{\"type\":\"plain_text\",\"text\":\":rocket: APK Build Completed\",\"emoji\":true}},{\"type\":\"section\",\"fields\":[{\"type\":\"mrkdwn\",\"text\":\"*Branch:*\n%FOLDER_NAME%\"},{\"type\":\"mrkdwn\",\"text\":\"*Commit Message:*\n%COMMIT_MESSAGE:~0,100%\"}]},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Download Links:*\n• APK: %DOWNLOAD_URL%\n• Jira Ticket: %TICKET_URL%\"}},{\"type\":\"context\",\"elements\":[{\"type\":\"mrkdwn\",\"text\":\":information_source: Build completed successfully\"}]}]}"
#
#          rem Escape the payload for PowerShell
#          powershell -Command "$payload = '%PAYLOAD%'; $body = $payload | ConvertFrom-Json; Invoke-RestMethod -Uri 'https://hooks.slack.com/services/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' -Method Post -Body ($body | ConvertTo-Json -Depth 10) -ContentType 'application/json'"
#        shell: cmd

#      - name: Failure Notification
#        if: failure()
#        run: |
#          @echo off
#          set "ERROR_MESSAGE={\"blocks\":[{\"type\":\"header\",\"text\":{\"type\":\"plain_text\",\"text\":\":warning: Build Failed\",\"emoji\":true}},{\"type\":\"section\",\"fields\":[{\"type\":\"mrkdwn\",\"text\":\"*Workflow:* ${{ github.job }}\"}]},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\"}},{\"type\":\"context\",\"elements\":[{\"type\":\"mrkdwn\",\"text\":\":x: Workflow encountered an error\"}]}]}"
#
#          powershell -Command "$message = '%ERROR_MESSAGE%'; $body = $message | ConvertFrom-Json; Invoke-RestMethod -Uri 'https://hooks.slack.com/services/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' -Method Post -Body ($body | ConvertTo-Json -Depth 10) -ContentType 'application/json'"
#        shell: cmd