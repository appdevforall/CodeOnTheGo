name: Build and upload release version to Firebase App Distribution

permissions:
  id-token: write
  contents: read
  actions: write

on:
  schedule:
    - cron: '0 12 * * *'  # Daily at 12:00 PM UTC
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: false
        default: 'stage'
        type: string

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IDE_SIGNING_ALIAS: ${{ secrets.IDE_SIGNING_ALIAS }}
  IDE_SIGNING_AUTH_PASS: ${{ secrets.IDE_SIGNING_AUTH_PASS }}
  IDE_SIGNING_AUTH_USER: ${{ secrets.IDE_SIGNING_AUTH_USER }}
  IDE_SIGNING_KEY_PASS: ${{ secrets.IDE_SIGNING_KEY_PASS }}
  IDE_SIGNING_STORE_PASS: ${{ secrets.IDE_SIGNING_STORE_PASS }}
  IDE_SIGNING_URL: ${{ secrets.IDE_SIGNING_URL }}
  IDE_SIGNING_KEY_BIN: ${{ secrets.IDE_SIGNING_KEY_BIN }}
  ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MVN_USERNAME }}
  ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MVN_PASSWORD }}
  ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MVN_SIGNING_KEY }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.MVN_SIGNING_KEY_ID }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MVN_SIGNING_KEY_PASSWORD }}
  FIREBASE_CONSOLE_URL: ${{ secrets.FIREBASE_CONSOLE_URL }}

jobs:
  build_apk:
    name: Build Release APK
    runs-on: self-hosted
    timeout-minutes: 60

    steps:

      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Determine branch to checkout
        id: determine_branch
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "BRANCH_TO_CHECKOUT=stage" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "BRANCH_TO_CHECKOUT=${{ github.event.inputs.branch || 'stage' }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "BRANCH_TO_CHECKOUT=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "BRANCH_TO_CHECKOUT=stage" >> $GITHUB_OUTPUT
          fi

      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.determine_branch.outputs.BRANCH_TO_CHECKOUT }}
          fetch-depth: 0

      - name: Install Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install -y git-lfs
          git lfs install
          git lfs pull

      - name: Initialize submodules
        run: |
          git submodule init
          git submodule update --remote

      - name: Check if Nix is installed
        id: check_nix
        run: |
          if command -v nix >/dev/null 2>&1; then
            echo "nix is installed"
            echo "nix_installed=true" >> $GITHUB_ENV
          else
            echo "nix is not installed"
            echo "nix_installed=false" >> $GITHUB_ENV
          fi

      - name: Install Flox
        if: env.nix_installed == 'false'
        uses: flox/install-flox-action@v2

      - name: Assemble Release APK
        run: |
          flox activate -d flox/base -- ./gradlew :app:assembleV8Release --no-daemon \
            -Dorg.gradle.jvmargs="-Xmx10g -XX:MaxMetaspaceSize=2g -XX:+HeapDumpOnOutOfMemoryError --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED" \
            -Dandroid.aapt2.daemonHeapSize=4096M \
            -Dorg.gradle.workers.max=1 \
            -Dorg.gradle.parallel=false

      - name: Find APK file
        id: find_apk
        run: |
          apk_path=$(find app/build/outputs/apk/ -path "*v8*/release/*.apk" | head -n 1)
          echo "APK_PATH=$apk_path" >> $GITHUB_OUTPUT

      - name: Set branch name and build type
        run: |
          BRANCH_NAME=${{ steps.determine_branch.outputs.BRANCH_TO_CHECKOUT }}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          BUILD_TYPE="RELEASE"
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV

      - name: Get Commit Information
        id: commit_info
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B | head -1 | tr -d '\n\r' | sed 's/[*]/â€¢/g')
          COMMIT_AUTHOR=$(git log -1 --pretty=%an)
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT

      - name: Extract Jira Ticket and Fetch Title
        id: extract_jira
        env:
          COMMIT_MSG: ${{ steps.commit_info.outputs.COMMIT_MSG }}
        run: |
          JIRA_TICKET=$(echo "$BRANCH_NAME" | grep -o 'ADFA-[0-9]\+' | head -1)
          
          
          if [ -n "$JIRA_TICKET" ]; then
            JIRA_URL="https://appdevforall.atlassian.net/browse/${JIRA_TICKET}"
          
            # Fetch Jira ticket title if credentials are available
            if [ -n "${{ secrets.JIRA_EMAIL }}" ] && [ -n "${{ secrets.JIRA_API_TOKEN }}" ]; then
              JIRA_TITLE=$(curl -s \
                -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
                -H "Accept: application/json" \
                "https://appdevforall.atlassian.net/rest/api/3/issue/${JIRA_TICKET}?fields=summary" \
                | jq -r '.fields.summary // ""' 2>/dev/null || echo "")
          
              # If unable to fetch title, default to commit message
              if [ -z "$JIRA_TITLE" ]; then
                JIRA_TITLE="$COMMIT_MSG"
              fi
            else
              JIRA_TITLE="$COMMIT_MSG"
            fi
          else
            JIRA_TICKET="N/A"
            JIRA_TITLE="$COMMIT_MSG"
            JIRA_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }} (Ref: ${{ github.ref }})"
          fi

          echo "JIRA_TICKET=$JIRA_TICKET" >> $GITHUB_OUTPUT
          echo "JIRA_TITLE=$JIRA_TITLE" >> $GITHUB_OUTPUT
          echo "JIRA_URL=$JIRA_URL" >> $GITHUB_OUTPUT

      - name: Authenticate to Google Cloud via Workload Identity
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.