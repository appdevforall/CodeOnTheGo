name: Build and upload release version to Firebase App Distribution
permissions:
  contents: read
  actions: write
on:
  workflow_dispatch: #

  push:
    branches:
    - 'ADFA-669-prod-support'

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IDE_SIGNING_ALIAS: ${{ secrets.IDE_SIGNING_ALIAS }}
  IDE_SIGNING_AUTH_PASS: ${{ secrets.IDE_SIGNING_AUTH_PASS }}
  IDE_SIGNING_AUTH_USER: ${{ secrets.IDE_SIGNING_AUTH_USER }}
  IDE_SIGNING_KEY_PASS: ${{ secrets.IDE_SIGNING_KEY_PASS }}
  IDE_SIGNING_STORE_PASS: ${{ secrets.IDE_SIGNING_STORE_PASS }}
  IDE_SIGNING_URL: ${{ secrets.IDE_SIGNING_URL }}
  IDE_SIGNING_KEY_BIN: ${{ secrets.IDE_SIGNING_KEY_BIN }}
  ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MVN_USERNAME }}
  ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MVN_PASSWORD }}
  ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MVN_SIGNING_KEY }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.MVN_SIGNING_KEY_ID }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MVN_SIGNING_KEY_PASSWORD }}
  FIREBASE_CONSOLE_URL: ${{ secrets.FIREBASE_CONSOLE_URL }}
  FIREBASE_DISTRIBUTION_URL: ${{ secrets.FIREBASE_DISTRIBUTION_URL }}
  FIREBASE_DOWNLOAD_URL: ${{ secrets.FIREBASE_DOWNLOAD_URL }}

jobs:
  build_apk:
    name: Build Release APK
    runs-on: self-hosted
    timeout-minutes: 60
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install and Configure Git LFS - Selective pull
        run: |
          sudo apt-get update
          sudo apt-get install -y git-lfs
          git lfs install
          git lfs pull

      - name: Initialize submodules
        run: |
          git submodule init
          git submodule update --remote

      - name: Check if Nix is installed
        id: check_nix
        run: |
          if command -v nix >/dev/null 2>&1; then
            echo "nix is installed"
            echo "nix_installed=true" >> $GITHUB_ENV
          else
            echo "nix is not installed"
            echo "nix_installed=false" >> $GITHUB_ENV
          fi

      - name: Install Flox
        if: env.nix_installed == 'false'
        uses: flox/install-flox-action@v2

      - name: Assemble Release APK
        run: |
          flox activate -d flox/base -- ./gradlew :app:assembleV8Release --no-daemon

      - name: Find APK file
        # We need to find the APK since the name is dynamically generated and it does not have a definite location
        id: find_apk
        run: |
          apk_path=$(find app/build/outputs/apk/ -path "*v8*/release/*.apk" | head -n 1)
          echo "APK_PATH=$apk_path" >> $GITHUB_OUTPUT
          echo "Found APK at: $apk_path"

      - name: Set branch name
        run: echo "BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV

      - name: Get PR and Commit Information
        id: pr_info
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            # Extract info from GitHub event file
            EVENT_PATH="${GITHUB_EVENT_PATH}"
            COMMIT_MSG=$(jq -r '.pull_request.title' "$EVENT_PATH")
            PR_AUTHOR=$(jq -r '.pull_request.user.login' "$EVENT_PATH")
            PR_URL=$(jq -r '.pull_request.html_url' "$EVENT_PATH")
            echo "PR_NUMBER=$(jq -r '.pull_request.number' "$EVENT_PATH")" >> $GITHUB_OUTPUT
            echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_OUTPUT
            echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_OUTPUT
            echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT
          else
            # Fallback to git log for non-PR builds
            COMMIT_MSG=$(git log -1 --pretty=%B)
            COMMIT_AUTHOR=$(git log -1 --pretty=%an)
            echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_OUTPUT
            echo "PR_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          fi

      - name: Extract Jira Ticket
        id: extract_jira
        run: |
          # Use regex to extract JIRA ticket in format ADFA-XXX
          JIRA_TICKET=$(echo "$BRANCH_NAME" | grep -o 'ADFA-[0-9]\+' | head -1)

          # If JIRA ticket was found, set the URL, otherwise set as N/A
          if [ -n "$JIRA_TICKET" ]; then
            JIRA_URL="https://appdevforall.atlassian.net/browse/${JIRA_TICKET}"
          else
            JIRA_TICKET="N/A"
            JIRA_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }} (Ref: ${{ github.ref }})"
          fi

          echo "JIRA_TICKET=$JIRA_TICKET" >> $GITHUB_OUTPUT
          echo "JIRA_URL=$JIRA_URL" >> $GITHUB_OUTPUT
          echo "BUILD_TYPE=[Release]" >> $GITHUB_OUTPUT

      - name: Upload artifact to Firebase App Distribution
        id: firebase_upload
        uses: emertozd/Firebase-Distribution-Github-Action@v2
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.COGO_BUILD_SERVICE_ACCOUNT }}
          groups: testers
          file: ${{ steps.find_apk.outputs.APK_PATH }}
          releaseNotes: ${{ steps.extract_jira.outputs.BUILD_TYPE }} ${{ steps.extract_jira.outputs.JIRA_URL }}"

      - name: Send Rich Slack Notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          JIRA_TICKET="${{ steps.extract_jira.outputs.JIRA_TICKET }}"
          JIRA_URL="${{ steps.extract_jira.outputs.JIRA_URL }}"
          FIREBASE_CONSOLE_URL="${{ env.FIREBASE_CONSOLE_URL }}"
          FIREBASE_DISTRIBUTION_URL="${{ env.FIREBASE_DISTRIBUTION_URL }}"
          FIREBASE_DOWNLOAD_URL="${{ env.FIREBASE_DOWNLOAD_URL }}"
          PR_AUTHOR="${{ steps.pr_info.outputs.PR_AUTHOR }}"
          BRANCH_NAME="${{ env.BRANCH_NAME }}"
          COMMIT_MSG="${{ steps.pr_info.outputs.COMMIT_MSG }}"

          # Create JSON payload
          echo '{
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": ":rocket: [Release] New Build Available",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "@here Please review and test this build."
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Jira Ticket:* '"$JIRA_URL"'"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Commit:* '"$COMMIT_MSG"'"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Author:* @'"$PR_AUTHOR"'"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View on Firebase",
                      "emoji": true
                    },
                    "url": "https://console.firebase.google.com/project/codeonthego-64a92/appdistribution",
                    "action_id": "firebase-console"
                  },
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Ticket",
                      "emoji": true
                    },
                    "url": "'"$JIRA_URL"'",
                    "action_id": "firebase-download"
                  }
                ]
              },
              {
                "type": "divider"
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "Deployed from branch `'"$BRANCH_NAME"'`"
                  }
                ]
              }
            ]
          }' > payload.json

          # Send notification
          curl -X POST -H "Content-type: application/json" --data @payload.json "$SLACK_WEBHOOK"