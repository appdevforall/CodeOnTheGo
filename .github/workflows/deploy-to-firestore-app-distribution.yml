name: Build and deploy to firebase app distribution

permissions:
  contents: read
  actions: write

on:
  pull_request:
    branches: [ "stage" ]
    types: [ opened, synchronize, reopened, closed ]
    paths-ignore:
      - '**/*.md'
      - 'fastlane/**'

  workflow_dispatch: { }

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IDE_SIGNING_ALIAS: ${{ secrets.IDE_SIGNING_ALIAS }}
  IDE_SIGNING_AUTH_PASS: ${{ secrets.IDE_SIGNING_AUTH_PASS }}
  IDE_SIGNING_AUTH_USER: ${{ secrets.IDE_SIGNING_AUTH_USER }}
  IDE_SIGNING_KEY_PASS: ${{ secrets.IDE_SIGNING_KEY_PASS }}
  IDE_SIGNING_STORE_PASS: ${{ secrets.IDE_SIGNING_STORE_PASS }}
  IDE_SIGNING_URL: ${{ secrets.IDE_SIGNING_URL }}
  IDE_SIGNING_KEY_BIN: ${{ secrets.IDE_SIGNING_KEY_BIN }}
  ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MVN_USERNAME }}
  ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MVN_PASSWORD }}
  ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MVN_SIGNING_KEY }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.MVN_SIGNING_KEY_ID }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MVN_SIGNING_KEY_PASSWORD }}
  FIREBASE_CONSOLE_URL: ${{ secrets.FIREBASE_CONSOLE_URL }}
  FIREBASE_DISTRIBUTION_URL: ${{ secrets.FIREBASE_DISTRIBUTION_URL }}
  FIREBASE_DOWNLOAD_URL: ${{ secrets.FIREBASE_DOWNLOAD_URL }}

jobs:
  build_apk:
    name: Build & (Maybe) Deploy APK
    runs-on: self-hosted
    timeout-minutes: 60
    outputs:
      has_latest_stage: ${{ steps.check_stage_sync.outputs.has_latest_stage }}

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Install and Configure Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install -y git-lfs
          git lfs install
          git lfs pull

      - name: Initialize submodules
        run: |
          git submodule init
          git submodule update --remote

      - name: Fetch stage branch
        run: git fetch origin stage:stage

      - name: Check if branch is up to date with stage
        id: check_stage_sync
        run: |
          if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            # after merge: is my branch tip now in stage?
            if git merge-base --is-ancestor HEAD stage; then
              echo "has_latest_stage=true" >> $GITHUB_OUTPUT
            else
              echo "has_latest_stage=false" >> $GITHUB_OUTPUT
            fi
          else
            # before merge: have I pulled in everything from stage?
            if git merge-base --is-ancestor stage HEAD; then
              echo "has_latest_stage=true" >> $GITHUB_OUTPUT
            else
              echo "has_latest_stage=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Check if Nix is installed
        id: check_nix
        run: |
          if command -v nix >/dev/null 2>&1; then
            echo "nix_installed=true" >> $GITHUB_ENV
          else
            echo "nix_installed=false" >> $GITHUB_ENV
          fi

      - name: Install Flox (if needed)
        if: env.nix_installed == 'false'
        uses: flox/install-flox-action@v2

      - name: Assemble Universal APK
        run: flox activate -d flox/base -- ./gradlew :app:assembleV8Debug --no-daemon

      - name: Find APK file
        id: find_apk
        run: |
          apk_path=$(find app/build/outputs/apk/ -path "*v8*/debug/*.apk" | head -n 1)
          echo "APK_PATH=$apk_path" >> $GITHUB_OUTPUT

      - name: Get PR and Commit Information
        id: pr_info
        run: |
          EVENT_PATH="${GITHUB_EVENT_PATH}"
          echo "COMMIT_MSG=$(jq -r '.pull_request.title' "$EVENT_PATH")" >> $GITHUB_OUTPUT
          echo "PR_AUTHOR=$(jq -r '.pull_request.user.login' "$EVENT_PATH")" >> $GITHUB_OUTPUT
          echo "PR_URL=$(jq -r '.pull_request.html_url' "$EVENT_PATH")" >> $GITHUB_OUTPUT

      - name: Extract Jira Ticket
        id: extract_jira
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"
          JIRA=$(echo "$BRANCH" | grep -o 'ADFA-[0-9]\+' | head -n1 || true)
          if [ -n "$JIRA" ]; then
            echo "JIRA_TICKET=$JIRA" >> $GITHUB_OUTPUT
            echo "JIRA_URL=https://appdevforall.atlassian.net/browse/$JIRA" >> $GITHUB_OUTPUT
          else
            echo "JIRA_TICKET=N/A" >> $GITHUB_OUTPUT
            echo "JIRA_URL=https://github.com/${{ github.repository }}/commit/${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Upload to Firebase App Distribution
        if: github.event.pull_request.merged == true
        uses: emertozd/Firebase-Distribution-Github-Action@v2
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.COGO_BUILD_SERVICE_ACCOUNT }}
          groups: testers
          file: ${{ steps.find_apk.outputs.APK_PATH }}
          releaseNotes: |
            Stage Sync: ${{ steps.check_stage_sync.outputs.has_latest_stage == 'true' && '✅ Up to date with stage' || '⚠️ Branch is not up to date with stage' }}
            Ticket:     ${{ steps.extract_jira.outputs.JIRA_URL }}

      - name: Send Rich Slack Notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ steps.check_stage_sync.outputs.has_latest_stage }}" = "true" ]; then
            SYNC_MSG="✅ Up to date with stage"
          else
            SYNC_MSG="⚠️ Branch is not up to date with stage"
          fi

          cat <<EOF > payload.json
          {
            "blocks": [
              { "type": "header", "text": { "type": "plain_text", "text": ":rocket: Build Report", "emoji": true } },
              { "type": "section", "text": { "type": "mrkdwn", "text": "*Stage Sync:* ${SYNC_MSG}" } },
              { "type": "section", "text": { "type": "mrkdwn", "text": "*Jira Ticket:* ${{ steps.extract_jira.outputs.JIRA_URL }}" } },
              { "type": "section", "text": { "type": "mrkdwn", "text": "*Commit:* ${{ steps.pr_info.outputs.COMMIT_MSG }}" } },
              { "type": "section", "text": { "type": "mrkdwn", "text": "*Author:* @${{ steps.pr_info.outputs.PR_AUTHOR }}" } },
              { "type": "actions", "elements": [
                  { "type": "button", "text": { "type": "plain_text", "text": "View on Firebase" }, "url": "${FIREBASE_CONSOLE_URL}" },
                  { "type": "button", "text": { "type": "plain_text", "text": "View Ticket"     }, "url": "${{ steps.extract_jira.outputs.JIRA_URL }}" }
                ]
              },
              { "type": "divider" },
              { "type": "context", "elements": [
                  { "type": "mrkdwn", "text": "Branch: \`${{ github.event.pull_request.head.ref }}\`" }
                ]
              }
            ]
          }
          EOF

          curl -X POST -H "Content-type: application/json" --data @payload.json "$SLACK_WEBHOOK"
