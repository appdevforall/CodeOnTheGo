name: Build and deploy to firebase app distribution
permissions:
  contents: read
  actions: write
on:
  pull_request:
    branches: [ "stage", "feature/**" ]
    paths-ignore:
      - '**.md'
      - 'fastlane/**'
      - '.github/workflows/crowdin_contributors.yml'
  workflow_dispatch: { }

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IDE_SIGNING_ALIAS: ${{ secrets.IDE_SIGNING_ALIAS }}
  IDE_SIGNING_AUTH_PASS: ${{ secrets.IDE_SIGNING_AUTH_PASS }}
  IDE_SIGNING_AUTH_USER: ${{ secrets.IDE_SIGNING_AUTH_USER }}
  IDE_SIGNING_KEY_PASS: ${{ secrets.IDE_SIGNING_KEY_PASS }}
  IDE_SIGNING_STORE_PASS: ${{ secrets.IDE_SIGNING_STORE_PASS }}
  IDE_SIGNING_URL: ${{ secrets.IDE_SIGNING_URL }}
  IDE_SIGNING_KEY_BIN: ${{ secrets.IDE_SIGNING_KEY_BIN }}
  ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MVN_USERNAME }}
  ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MVN_PASSWORD }}
  ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MVN_SIGNING_KEY }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.MVN_SIGNING_KEY_ID }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MVN_SIGNING_KEY_PASSWORD }}
  BUILD_JAVA_VERSION: '17'
  BUILD_JAVA_DIST: 'temurin'

jobs:
  build_apk:
    name: Build Universal APK
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git LFS - Selective pull
        run: |
          git lfs install
          git lfs pull

      - name: Initialize submodules
        run: |
          git submodule init
          git submodule update --remote
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.BUILD_JAVA_VERSION }}
          distribution: ${{ env.BUILD_JAVA_DIST }}
          cache: 'gradle' # Built-in Gradle caching

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches/modules-2
            ~/.gradle/caches/jars-*
            ~/.gradle/caches/transforms-*
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: ${{ runner.os }}-gradle-deps-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-deps-


      - name: Create symbolic link for LayoutEditor (Linux only)
        run: |
          SOURCE_PATH="$GITHUB_WORKSPACE/LayoutEditor"
          DEST_PATH="$GITHUB_WORKSPACE/layouteditor"

          if [[ "$(uname -s)" == "Linux" ]]; then
            if [ -L "$DEST_PATH" ]; then
              echo "Symbolic link already exists: $DEST_PATH"
            elif [ -e "$DEST_PATH" ]; then
              echo "Destination path already exists but is not a symlink. Please check manually."
              exit 1
            else
              ln -s "$SOURCE_PATH" "$DEST_PATH"
              echo "Symbolic link created: $DEST_PATH -> $SOURCE_PATH"
            fi
          else
            echo "Skipping symbolic link creation: Not running on Linux."
          fi

      - name: Assemble Universal APK
        run:  ./gradlew :app:assembleDebug

      - name: Find APK file
        id: find_apk
        run: |
          apk_path=$(find app/build/outputs/apk/ -type f -name "*.apk" | head -n 1)
          echo "APK_PATH=$apk_path" >> $GITHUB_OUTPUT
          echo "Found APK at: $apk_path"
      - name: Set branch name
        run: echo "BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV

      - name: Get PR and Commit Information
        id: pr_info
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            # Extract info from GitHub event file
            EVENT_PATH="${GITHUB_EVENT_PATH}"
            COMMIT_MSG=$(jq -r '.pull_request.title' "$EVENT_PATH")
            PR_AUTHOR=$(jq -r '.pull_request.user.login' "$EVENT_PATH")
            PR_URL=$(jq -r '.pull_request.html_url' "$EVENT_PATH")

            echo "PR_NUMBER=$(jq -r '.pull_request.number' "$EVENT_PATH")" >> $GITHUB_OUTPUT
            echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_OUTPUT
            echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_OUTPUT
            echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT
          else
            # Fallback to git log for non-PR builds
            COMMIT_MSG=$(git log -1 --pretty=%B)
            COMMIT_AUTHOR=$(git log -1 --pretty=%an)
            echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_OUTPUT
            echo "PR_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          fi

      - name: Extract Jira Ticket
        id: extract_jira
        run: |
          # Use regex to extract JIRA ticket in format ADFA-XXX
          JIRA_TICKET=$(echo "$BRANCH_NAME" | grep -o 'ADFA-[0-9]\+' | head -1)
          
          # If JIRA ticket was found, set the URL, otherwise set as N/A
          if [ -n "$JIRA_TICKET" ]; then
            JIRA_URL="https://appdevforall.atlassian.net/browse/${JIRA_TICKET}"
          else
            JIRA_TICKET="N/A"
            JIRA_URL="#"
          fi
          
          echo "JIRA_TICKET=$JIRA_TICKET" >> $GITHUB_OUTPUT
          echo "JIRA_URL=$JIRA_URL" >> $GITHUB_OUTPUT
      - name: Upload artifact to Firebase App Distribution
        id: firebase_upload
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.COGO_BUILD_SERVICE_ACCOUNT }}
          groups: testers
          file: ${{ steps.find_apk.outputs.APK_PATH }}
          releaseNotes: ${{ steps.extract_jira.outputs.JIRA_URL }}

      - name: Display Firebase URLs
        run: |
          # Display available output URLs directly
          echo "Firebase Console URL: ${{ steps.firebase_upload.outputs.TESTING_URI }}"
          

      - name: Send Rich Slack Notification
        run: |
          JIRA_TICKET="${{ steps.extract_jira.outputs.JIRA_TICKET }}"
          JIRA_URL="${{ steps.extract_jira.outputs.JIRA_URL }}"
          FIREBASE_CONSOLE_URL="${{ env.FIREBASE_CONSOLE_URL }}"
          FIREBASE_DISTRIBUTION_URL="${{ steps.firebase_upload.outputs.TESTING_URI }}"
          FIREBASE_DOWNLOAD_URL="${{ env.FIREBASE_DOWNLOAD_URL }}"
          PR_AUTHOR="${{ steps.pr_info.outputs.PR_AUTHOR }}"
          
          # Create a rich Slack message using blocks
          payload=$(cat <<EOF
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": " New Build Available",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "@here Please review and test this build."
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Branch:* `$BRANCH_NAME`\n*Jira Ticket:* <$JIRA_URL|$JIRA_TICKET>"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Commit:* ${{ steps.pr_info.outputs.COMMIT_MSG }}"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "* Author:* @$PR_AUTHOR"
                },
                "accessory": {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "Download APK",
                    "emoji": true
                  },
                  "url": "$FIREBASE_DISTRIBUTION_URL",
                  "action_id": "button-action"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Firebase Links:*\n• <$FIREBASE_CONSOLE_URL|Firebase Console>\n• <$FIREBASE_DISTRIBUTION_URL|Distribution Link>\n• <$FIREBASE_DOWNLOAD_URL|Direct Download Link>"
                }
              },
              {
                "type": "divider"
              }
            ]
          }
          EOF
          )
          
          curl -X POST -H 'Content-type: application/json' --data "$payload" https://hooks.slack.com/services/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